---
# tasks file for ansible-role-icingaweb2

- name: "Include {{ ansible_os_family }}.yml"
  include_vars: "{{ ansible_os_family }}.yml"

- name: "Include install-{{ ansible_os_family }}.yml"
  include: "install-{{ ansible_os_family }}.yml"

- name: Ensure icingaweb2_conf_dir is writable by icingaweb2_user
  # XXX icingaweb2 expects the directory is writable, such as when creating a
  # dashboard from the Web UI.
  ansible.builtin.file:
    path: "{{ icingaweb2_conf_dir }}"
    mode: "0755"
    owner: "{{ icingaweb2_user }}"
    group: "{{ icingaweb2_group }}"
    state: directory

- name: Create enabledModules dirctory
  ansible.builtin.file:
    path: "{{ icingaweb2_conf_dir }}/enabledModules"
    mode: "0750"
    owner: "{{ icingaweb2_user }}"
    group: "{{ icingaweb2_group }}"
    state: directory

- name: Create modules directory
  ansible.builtin.file:
    path: "{{ icingaweb2_conf_dir }}/modules"
    mode: "0750"
    owner: "{{ icingaweb2_user }}"
    group: "{{ icingaweb2_group }}"
    state: directory

- name: Create modules/monitoring directory
  ansible.builtin.file:
    path: "{{ icingaweb2_conf_dir }}/modules/monitoring"
    mode: "0750"
    owner: "{{ icingaweb2_user }}"
    group: "{{ icingaweb2_group }}"
    state: directory

- name: Create icingaweb2_plugins_git_dir
  ansible.builtin.file:
    path: "{{ icingaweb2_plugins_git_dir }}"
    mode: "0755"
    owner: "{{ icingaweb2_user }}"
    group: "{{ icingaweb2_group }}"
    state: directory

- name: Install plugins in icingaweb2_plugins_git
  ansible.builtin.git:
    accept_hostkey: "{{ item['git']['accept_hostkey'] | default(omit) }}"
    accept_newhostkey: "{{ item['git']['accept_newhostkey'] | default(omit) }}"
    archive: "{{ item['git']['archive'] | default(omit) }}"
    archive_prefix: "{{ item['git']['archive_prefix'] | default(omit) }}"
    bare: "{{ item['git']['bare'] | default(omit) }}"
    clone: "{{ item['git']['clone'] | default(omit) }}"
    depth: "{{ item['git']['depth'] | default(omit) }}"
    dest: "{{ icingaweb2_plugins_git_dir }}/{{ item['name'] }}"
    executable: "{{ item['git']['executable'] | default(omit) }}"
    force: "{{ item['git']['force'] | default(omit) }}"
    gpg_whitelist: "{{ item['git']['gpg_whitelist'] | default(omit) }}"
    key_file: "{{ item['git']['key_file'] | default(omit) }}"
    recursive: "{{ item['git']['recursive'] | default(omit) }}"
    reference: "{{ item['git']['reference'] | default(omit) }}"
    refspec: "{{ item['git']['refspec'] | default(omit) }}"
    remote: "{{ item['git']['remote'] | default(omit) }}"
    repo: "{{ item['git']['repo'] }}"
    separate_git_dir: "{{ item['git']['separate_git_dir'] | default(omit) }}"
    single_branch: "{{ item['git']['single_branch'] | default(omit) }}"
    ssh_opts: "{{ item['git']['ssh_opts'] | default(omit) }}"
    track_submodules: "{{ item['git']['track_submodules'] | default(omit) }}"
    umask: "{{ item['git']['umask'] | default('0022') }}"
    # XXX `update` is one of methods of dict object, and cannot be used here.
    # use `git_update` to avoid collision
    update: "{{ item['git']['git_update'] | default(omit) }}"
    verify_commit: "{{ item['git']['verify_commit'] | default(omit) }}"
    version: "{{ item['git']['version'] | default(omit) }}"
  with_items: "{{ icingaweb2_plugins_git }}"

- name: Create links to checks in icingaweb2_plugins_git
  ansible.builtin.file:
    path: "{{ icingaweb2_plugin_contrib_dir }}/{{ item[1] }}"
    src: "{{ icingaweb2_plugins_git_dir }}/{{ item[0]['name'] }}/{{ item[1] }}"
    state: link
  loop: "{{ icingaweb2_plugins_git | subelements('links') }}"

- name: Create icingaweb2_conf_files
  ansible.builtin.template:
    src: config.ini.j2
    dest: "{{ icingaweb2_conf_dir }}/{{ item['name'] }}"
    owner: "{{ item['owner'] | default(icingaweb2_user) }}"
    group: "{{ item['group'] | default(icingaweb2_group) }}"
    mode: "{{ item['mode'] | default('0640') }}"
  with_items: "{{ icingaweb2_conf_files }}"
  when:
    - item['state'] | default('present') == 'present'

- name: Delete icingaweb2_conf_files
  ansible.builtin.file:
    path: "{{ icingaweb2_conf_dir }}/{{ item['name'] }}"
  with_items: "{{ icingaweb2_conf_files }}"
  when:
    - "'state' in item and item['state'] == 'absent'"

- name: Enable modules
  ansible.builtin.command: "icingacli module enable {{ item['name'] | quote }}"
  args:
    creates: "{{ icingaweb2_conf_dir }}/enabledModules/{{ item['name'] }}"
  with_items: "{{ icingaweb2_modules }}"
  when:
    - item['state'] | default('enabled') == 'enabled'

- name: Disable modules
  ansible.builtin.command: "icingacli module disable {{ item['name'] | quote }}"
  args:
    removes: "{{ icingaweb2_conf_dir }}/enabledModules/{{ item['name'] }}"
  with_items: "{{ icingaweb2_modules }}"
  when:
    - "'state' in item and item['state'] == 'disabled'"

- name: Create database (postgresql)
  community.general.postgresql_db:
    login_host: "{{ icingaweb2_database_login_host }}"
    login_user: "{{ icingaweb2_database_login_user }}"
    login_password: "{{ icingaweb2_database_login_password }}"
    port: "{{ icingaweb2_database_port }}"
    name: "{{ icingaweb2_database_name }}"
    owner: "{{ icingaweb2_database_user }}"
    state: present
  register: __icingaweb2_create_database
  when:
    - icingaweb2_database_type == 'postgresql'

- name: See if database schema is in the database (postgresql)
  community.general.postgresql_query:
    login_host: "{{ icingaweb2_database_login_host }}"
    login_user: "{{ icingaweb2_database_login_user }}"
    login_password: "{{ icingaweb2_database_login_password }}"
    port: "{{ icingaweb2_database_port }}"
    db: "{{ icingaweb2_database_name }}"
    query: SELECT EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename LIKE 'icingaweb%')
  register: __icingaweb2_schema_exists
  when:
    - icingaweb2_database_type == 'postgresql'

- name: Create database schema (postgresql)
  community.general.postgresql_db:
    login_host: "{{ icingaweb2_database_login_host }}"
    login_user: "{{ icingaweb2_database_login_user }}"
    login_password: "{{ icingaweb2_database_login_password }}"
    port: "{{ icingaweb2_database_port }}"
    name: "{{ icingaweb2_database_name }}"
    owner: "{{ icingaweb2_database_user }}"
    target: "{{ icingaweb2_database_schema_file }}"
    state: restore
  when:
    - icingaweb2_database_type == 'postgresql'
    - not __icingaweb2_schema_exists['query_result'][0]['exists']

- name: See if icingaweb2_default_admin_name user exists (postgresql)
  community.general.postgresql_query:
    login_host: "{{ icingaweb2_database_login_host }}"
    login_user: "{{ icingaweb2_database_login_user }}"
    login_password: "{{ icingaweb2_database_login_password }}"
    port: "{{ icingaweb2_database_port }}"
    db: "{{ icingaweb2_database_name }}"
    query: SELECT EXISTS (SELECT 1 FROM icingaweb_user WHERE name = %(name)s);
    named_args:
      name: "{{ icingaweb2_default_admin_name }}"
  register: __icingaweb2_default_admin_exists
  when:
    - icingaweb2_database_type == 'postgresql'

- name: Create icingaweb2_default_admin_name user (postgresql)
  community.general.postgresql_query:
    login_host: "{{ icingaweb2_database_login_host }}"
    login_user: "{{ icingaweb2_database_login_user }}"
    login_password: "{{ icingaweb2_database_login_password }}"
    port: "{{ icingaweb2_database_port }}"
    db: "{{ icingaweb2_database_name }}"
    query: "INSERT INTO icingaweb_user (name, active, password_hash) VALUES (%(name)s, 1, %(password_hash)s)"
    named_args:
      name: "{{ icingaweb2_default_admin_name }}"
      # see: Manual User Creation for Database Authentication Backend
      # https://icinga.com/docs/icinga-web-2/latest/doc/20-Advanced-Topics/#manual-user-creation-for-database-authentication-backend
      password_hash: "{{ icingaweb2_default_admin_password | password_hash('bcrypt') }}"
  when:
    - icingaweb2_database_type == 'postgresql'
    - not __icingaweb2_default_admin_exists['query_result'][0]['exists']
